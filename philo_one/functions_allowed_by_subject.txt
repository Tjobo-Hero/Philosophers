# **************************************************************************** #
#                                                                              #
#                                                         ::::::::             #
#    functions_allowed_by_subject.txt                   :+:    :+:             #
#                                                      +:+                     #
#    By: timvancitters <timvancitters@student.co      +#+                      #
#                                                    +#+                       #
#    Created: 2021/03/04 14:50:18 by timvancitte   #+#    #+#                  #
#    Updated: 2021/03/10 17:42:17 by timvancitte   ########   odam.nl          #
#                                                                              #
# **************************************************************************** #

FUNCTION MANUEL

#### General Functions ####

*Memset*
The function memset (think, "memory setter") is a C standard library function 
that sets, or, more semantically, fills, a block of memory with a value.

*Printf*
In C programming language, printf() function is used to print the 
(“character, string, float, integer, octal and hexadecimal values”) onto 
the output screen.

*Malloc*
“malloc” or “memory allocation” method in C is used to dynamically allocate
a single large block of memory with the specified size. It returns a 
pointer of type void which can be cast into a pointer of any form. 
It initializes each block with default garbage value.

*Free*
The C library function void free(void *ptr) deallocates the memory previously 
allocated by a call to calloc, malloc, or realloc.

*Write*
The write() function shall attempt to write nbyte bytes from the buffer 
pointed to by buf to the file associated with the open file descriptor, fildes.

*Usleep*
The usleep() function suspends execution of the calling thread
for (at least) usec microseconds.  The sleep may be lengthened
slightly by any system activity or by the time spent processing
the call or by the granularity of system timers.

*Gettimeoffday*
The gettimeofday() function gets the system’s clock time. The current 
time is expressed in elapsed seconds and microseconds since 00:00:00, 
January 1, 1970 (Unix Epoch). 


#### Thread ####

*Pthread_create*
The pthread_create() function is used to create a new thread, 
with attributes specified by attr, within a process. 

*Pthread_detach*
The pthread_detach() function marks the thread identified by
thread as detached.  When a detached thread terminates, its
resources are automatically released back to the system without
the need for another thread to join with the terminated thread.

Attempting to detach an already detached thread results in
unspecified behavior.

*Pthread_join*
The pthread_join() function waits for the thread specified by
thread to terminate.  If that thread has already terminated, then
pthread_join() returns immediately.  The thread specified by
thread must be joinable.

#### Mutex ####

*Pthread_mutex_init*
The pthread_mutex_init() function initialises the mutex referenced 
by mutex with attributes specified by attr. If attr is NULL, the default 
mutex attributes are used; the effect is the same as passing the address 
of a default mutex attributes object. Upon okful initialisation, 
the state of the mutex becomes initialised and unlocked.

*Pthread_mutex_destroy*
The pthread_mutex_destroy() function shall destroy the mutex object 
referenced by mutex; the mutex object becomes, in effect, uninitialized. 
An implementation may cause pthread_mutex_destroy() to set the object referenced 
by mutex to an invalid value. A destroyed mutex object can be reinitialized 
using pthread_mutex_init(); the results of otherwise referencing the object 
after it has been destroyed are undefined.

It shall be safe to destroy an initialized mutex that is unlocked. 
Attempting to destroy a locked mutex results in undefined behavior.

*Pthread_mutex_lock*
The mutex object referenced by mutex shall be locked by calling 
pthread_mutex_lock(). If the mutex is already locked, the calling 
thread shall block until the mutex becomes available. This operation 
shall return with the mutex object referenced by mutex in the locked 
state with the calling thread as its owner.

*Pthread_mutex_unlock*
The pthread_mutex_unlock() function shall release the mutex object referenced 
by mutex. The manner in which a mutex is released is dependent upon the mutex's 
type attribute. If there are threads blocked on the mutex object referenced by 
mutex when pthread_mutex_unlock() is called, resulting in the mutex becoming 
available, the scheduling policy shall determine which thread shall acquire 
the mutex.