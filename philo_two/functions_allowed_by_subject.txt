# **************************************************************************** #
#                                                                              #
#                                                         ::::::::             #
#    functions_allowed_by_subject.txt                   :+:    :+:             #
#                                                      +:+                     #
#    By: timvancitters <timvancitters@student.co      +#+                      #
#                                                    +#+                       #
#    Created: 2021/03/04 14:50:18 by timvancitte   #+#    #+#                  #
#    Updated: 2021/03/12 12:29:26 by timvancitte   ########   odam.nl          #
#                                                                              #
# **************************************************************************** #

FUNCTION MANUEL

#### General Functions ####

*Memset*
The function memset (think, "memory setter") is a C standard library function 
that sets, or, more semantically, fills, a block of memory with a value.

*Printf*
In C programming language, printf() function is used to print the 
(“character, string, float, integer, octal and hexadecimal values”) onto 
the output screen.

*Malloc*
“malloc” or “memory allocation” method in C is used to dynamically allocate
a single large block of memory with the specified size. It returns a 
pointer of type void which can be cast into a pointer of any form. 
It initializes each block with default garbage value.

*Free*
The C library function void free(void *ptr) deallocates the memory previously 
allocated by a call to calloc, malloc, or realloc.

*Write*
The write() function shall attempt to write nbyte bytes from the buffer 
pointed to by buf to the file associated with the open file descriptor, fildes.

*Usleep*
The usleep() function suspends execution of the calling thread
for (at least) usec microseconds.  The sleep may be lengthened
slightly by any system activity or by the time spent processing
the call or by the granularity of system timers.

*Gettimeoffday*
The gettimeofday() function gets the system’s clock time. The current 
time is expressed in elapsed seconds and microseconds since 00:00:00, 
January 1, 1970 (Unix Epoch). 


#### Thread ####

*Pthread_create*
The pthread_create() function is used to create a new thread, 
with attributes specified by attr, within a process. 

*Pthread_detach*
The pthread_detach() function marks the thread identified by
thread as detached.  When a detached thread terminates, its
resources are automatically released back to the system without
the need for another thread to join with the terminated thread.

Attempting to detach an already detached thread results in
unspecified behavior.

*Pthread_join*
The pthread_join() function waits for the thread specified by
thread to terminate.  If that thread has already terminated, then
pthread_join() returns immediately.  The thread specified by
thread must be joinable.

#### Semaphore ####

*Sem_open*
The sem_open() function shall establish a connection between a 
named semaphore and a process. Following a call to sem_open() with 
semaphore name name, the process may reference the semaphore associated 
with name using the address returned from the call. This semaphore may 
be used in subsequent calls to sem_wait(), [TMO] [Option Start] sem_timedwait(), 
[Option End] sem_trywait(), sem_post(), and sem_close(). The semaphore remains 
usable by this process until the semaphore is closed by a successful call to sem_close(), _exit(), 
or one of the exec functions.

The oflag argument controls whether the semaphore is created or merely 
accessed by the call to sem_open(). The following flag bits may be set in oflag:

O_CREAT
This flag is used to create a semaphore if it does not already exist. 
If O_CREAT is set and the semaphore already exists, then O_CREAT has no effect, 
except as noted under O_EXCL. Otherwise, sem_open() creates a named semaphore. 
The O_CREAT flag requires a third and a fourth argument: mode, which is of type mode_t, 
and value, which is of type unsigned. The semaphore is created with an initial value of value. 
Valid initial values for semaphores are less than or equal to {SEM_VALUE_MAX}.
The user ID of the semaphore is set to the effective user ID of the process; 
the group ID of the semaphore is set to a system default group ID or to the 
effective group ID of the process. The permission bits of the semaphore are set to 
the value of the mode argument except those set in the file mode creation mask of the process. 
When bits in mode other than the file permission bits are specified, the effect is unspecified.

After the semaphore named name has been created by sem_open() with the O_CREAT flag, 
other processes can connect to the semaphore by calling sem_open() with the same value of name.

*Sem_close*
The sem_close() function shall indicate that the calling process is finished 
using the named semaphore indicated by sem. The effects of calling sem_close() 
for an unnamed semaphore (one created by sem_init()) are undefined. The sem_close() 
function shall deallocate (that is, make available for reuse by a subsequent sem_open() 
by this process) any system resources allocated by the system for use by this process for 
this semaphore. The effect of subsequent use of the semaphore indicated by sem by this process 
is undefined. If the semaphore has not been removed with a successful call to sem_unlink(), 
then sem_close() has no effect on the state of the semaphore. If the sem_unlink() function has 
been successfully invoked for name after the most recent call to sem_open() with O_CREAT for 
this semaphore, then when all processes that have opened the semaphore close it, the semaphore 
is no longer accessible.


*Sem_post*
sem_post() increments (unlocks) the semaphore pointed to by sem.
If the semaphore's value consequently becomes greater than zero,
then another process or thread blocked in a sem_wait(3) call will
be woken up and proceed to lock the semaphore.

*Sem_wait*
sem_wait() decrements (locks) the semaphore pointed to by sem.
If the semaphore's value is greater than zero, then the decrement
proceeds, and the function returns, immediately.  If the
semaphore currently has the value zero, then the call blocks
until either it becomes possible to perform the decrement (i.e.,
the semaphore value rises above zero), or a signal handler
interrupts the call.

*Sem_unlink*
sem_unlink() removes the named semaphore referred to by name.
The semaphore name is removed immediately.  The semaphore is
destroyed once all other processes that have the semaphore open
close it.